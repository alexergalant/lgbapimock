{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple API",
    "version": "1.0.0",
    "title": "RefonteLogiciel"
  },
  "securityDefinitions": {
    "AuthTokenKey": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Auth-Token"
    }
  },
  "tags": [
    {
      "name": "AuthToken",
      "description": "AuthToken controller"
    }
  ],
  "paths": {
    "/auth-tokens": {
      "post": {
        "tags": [
          "AuthToken"
        ],
        "summary": "Generate authentication token",
        "operationId": "postAuthToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Credentials",
            "description": "Credentials of the user to log in",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token information",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Form Error",
            "schema": {
              "$ref": "#/definitions/FormError"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          }
        }
      }
    },
    "/auth-token/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Authentication token"
        }
      ],
      "delete": {
        "security": [
          {
            "AuthTokenKey": []
          }
        ],
        "tags": [
          "AuthToken"
        ],
        "summary": "Delete authentication token",
        "operationId": "deleteAuthToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successful"
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/InvalidAuthTokenError"
            }
          }
        }
      }
    },
    "/servings/summary": {
      "parameters": [
        {
          "in": "query",
          "name": "date",
          "type": "string",
          "required": false,
          "description": "Date to get the servings from (YYYY-MM-DD)"
        }
      ],
      "get": {
        "tags": [
          "Serving"
        ],
        "summary": "Returns a summary of servings",
        "operationId": "getServingsSummary",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of servings details",
            "schema": {
              "$ref": "#/definitions/ServingsSummary"
            }
          }
        }
      }
    },
    "/events/summary": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Returns a summary of upcoming events",
        "operationId": "getEventsSummary",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of events details",
            "schema": {
              "$ref": "#/definitions/EventsSummary"
            }
          }
        }
      }
    },
    "/servings/current": {
      "get": {
        "tags": [
          "Serving"
        ],
        "summary": "Returns the current serving",
        "operationId": "getCurrentServing",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A serving moment and ID",
            "schema": {
              "$ref": "#/definitions/Serving"
            }
          }
        }
      }
    },
    "/serving/{date}/{moment}": {
      "parameters": [
        {
          "in": "path",
          "name": "date",
          "type": "string",
          "required": true,
          "description": "Desired date"
        },
        {
          "in": "path",
          "name": "moment",
          "type": "string",
          "required": true,
          "description": "Desired moment"
        }
      ],
      "get": {
        "tags": [
          "Serving"
        ],
        "summary": "Returns the serving that corresponds to the given date and moment",
        "operationId": "getServing",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A serving moment and ID",
            "schema": {
              "$ref": "#/definitions/Serving"
            }
          }
        }
      }
    },
    "/serving/{date}/{moment}/bookings": {
      "parameters": [
        {
          "in": "path",
          "name": "date",
          "type": "string",
          "required": true,
          "description": "Desired date"
        },
        {
          "in": "path",
          "name": "moment",
          "type": "string",
          "required": true,
          "description": "Desired moment"
        }
      ],
      "get": {
        "tags": [
          "Serving"
        ],
        "summary": "Returns a list of bookings for a given date and moment",
        "operationId": "getBookingsByDateAndMoment",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of bookings",
            "schema": {
              "$ref": "#/definitions/Bookings"
            }
          }
        }
      }
    },
    "/booking/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Returns the details of the booking",
        "operationId": "getBookingDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A booking's details",
            "schema": {
              "$ref": "#/definitions/BookingDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Booking"
        ],
        "summary": "Update a booking's details",
        "operationId": "putUpdateBooking",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Booking",
            "description": "The updated booking details",
            "schema": {
              "$ref": "#/definitions/BookingDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking",
            "schema": {
              "$ref": "#/definitions/BookingDetails"
            }
          },
          "400": {
            "description": "Form Error",
            "schema": {
              "$ref": "#/definitions/FormError"
            }
          }
        }
      }
    },
    "/booking/{id}/enqueue": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "BookingQueue",
            "description": "The updated booking queue order",
            "schema": {
              "$ref": "#/definitions/BookingQueue"
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Enqueue the booking with the given ID",
        "operationId": "postBookingEnqueue",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The booking's queue order",
            "schema": {
              "$ref": "#/definitions/BookingQueue"
            }
          }
        }
      }
    },
    "/booking": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "Booking",
            "description": "The booking to create",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Create the booking with the given values",
        "operationId": "postBookingCreate",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The created booking",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          }
        }
      }
    },
    "/booking/{id}/tables": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "tables",
            "description": "The booking to create",
            "schema": {
              "type": "object",
              "properties": {
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    57,
                    78
                  ]
                }
              }
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Assign the tables to the booking with the given ID",
        "operationId": "postBookingAssignTables",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking's tables are assigned"
          },
          "400": {
            "description": "One of the tables is already booked or blocked"
          },
          "404": {
            "description": "The booking doesn't exist"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "body",
            "name": "Initials",
            "description": "The booking to create",
            "schema": {
              "type": "object",
              "properties": {
                "initials": {
                  "type": "string",
                  "example": "jd"
                }
              }
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Free the tables of the booking with the given ID",
        "operationId": "deleteBookingTables",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking's tables are free"
          }
        }
      }
    },
    "/booking/{id}/move": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "tables",
            "description": "The new tables to assign",
            "schema": {
              "type": "object",
              "properties": {
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "example": [
                    57,
                    78
                  ]
                },
                "initials": {
                  "type": "string",
                  "example": "JD"
                }
              }
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Moves the booking with the given ID the the given tables",
        "operationId": "postBookingMove",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking's tables have changed"
          },
          "400": {
            "description": "One of the tables is already booked or blocked"
          },
          "404": {
            "description": "The booking doesn't exist"
          }
        }
      }
    },
    "/booking/{id}/movable": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Removes the 'unmovable' flag for the given booking",
        "operationId": "postBookingMovable",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking is now movable"
          },
          "400": {
            "description": "The booking was not unmovable"
          },
          "404": {
            "description": "The booking doesn't exist"
          }
        }
      }
    },
    "/booking/{id}/unmovable": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Adds the 'unmovable' flag for the given booking",
        "operationId": "postBookingUnmovable",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking is now unmovable"
          },
          "400": {
            "description": "The booking is already unmovable"
          },
          "404": {
            "description": "The booking doesn't exist"
          }
        }
      }
    },
    "/booking/{id}/arrive": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Free the tables of the booking with the given ID",
        "operationId": "postBookingArrive",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking's client arrived"
          },
          "400": {
            "description": "The booking is not confirmed (status IS NOT empty)"
          },
          "404": {
            "description": "No booking exists with the given ID"
          }
        }
      }
    },
    "/rooms": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get a list of rooms",
        "operationId": "getRooms",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rooms list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Room"
              }
            }
          }
        }
      }
    },
    "/room/{id}/{date}/{moment}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Room ID"
        },
        {
          "in": "path",
          "name": "date",
          "type": "string",
          "required": true,
          "description": "Date"
        },
        {
          "in": "path",
          "name": "moment",
          "type": "string",
          "required": true,
          "description": "moment"
        }
      ],
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get the tables of the given room for the given date",
        "operationId": "getRoomTables",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The room's tables",
            "schema": {
              "$ref": "#/definitions/RoomTables"
            }
          },
          "404": {
            "description": "The room doesn't exist"
          }
        }
      }
    },
    "/room/{id}/{date}/{moment}/squares": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Room ID"
        },
        {
          "in": "path",
          "name": "date",
          "type": "string",
          "required": true,
          "description": "Date"
        },
        {
          "in": "path",
          "name": "moment",
          "type": "string",
          "required": true,
          "description": "moment"
        }
      ],
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get the squares of the given room for the given date",
        "operationId": "getRoomSquares",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The room's squares",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Square"
              }
            }
          },
          "404": {
            "description": "The room doesn't exist"
          }
        }
      }
    },
    "/table/{number}/block": {
      "parameters": [
        {
          "in": "path",
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "The table's number"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "Action",
            "description": "The data",
            "schema": {
              "$ref": "#/definitions/TableBlock"
            }
          }
        ],
        "tags": [
          "Table"
        ],
        "summary": "Block the given table for the date / moment / part",
        "operationId": "postTableBlock",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The table is blocked"
          },
          "400": {
            "description": "The table is already booked or blocked for this serving/part"
          },
          "404": {
            "description": "The table doesn't exist"
          }
        }
      }
    },
    "/tables/block": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "tables",
            "description": "The tables' number to block",
            "schema": {
              "$ref": "#/definitions/TablesBlock"
            }
          }
        ],
        "tags": [
          "Table"
        ],
        "summary": "Blocks the given tables",
        "operationId": "postBlockTables",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The tables are blocked"
          },
          "400": {
            "description": "One of the tables is already booked or blocked"
          }
        }
      }
    },
    "/table/{number}/unblock": {
      "parameters": [
        {
          "in": "path",
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "The table's number"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "Action",
            "description": "The data",
            "schema": {
              "$ref": "#/definitions/TableBlock"
            }
          }
        ],
        "tags": [
          "Table"
        ],
        "summary": "Unblock the given table for the date / moment / part",
        "operationId": "postTableUnblock",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The table is unblocked"
          },
          "400": {
            "description": "The table is not blocked for this serving/part"
          },
          "404": {
            "description": "The table doesn't exist"
          }
        }
      }
    },
    "/tables/unblock": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "tables",
            "description": "The tables' number to block",
            "schema": {
              "$ref": "#/definitions/TablesBlock"
            }
          }
        ],
        "tags": [
          "Table"
        ],
        "summary": "Unblocks the given tables",
        "operationId": "postUnblockTables",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The tables are unblocked"
          },
          "400": {
            "description": "One of the tables is not blocked"
          }
        }
      }
    },
    "/booking/{id}/leave": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Booking ID"
        }
      ],
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Sets the booking's status to \"done\"",
        "operationId": "postBookingLeave",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking's done"
          },
          "404": {
            "description": "No booking exists with the given ID"
          }
        }
      }
    },
    "/booking/{id}/cancel": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "The booking's ID"
        }
      ],
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "Action",
            "description": "The data",
            "schema": {
              "type": "object",
              "properties": {
                "initials": {
                  "type": "string",
                  "example": "JB"
                },
                "reason": {
                  "type": "string",
                  "example": "Autre (précisez)"
                },
                "comment": {
                  "type": "string",
                  "example": "Sa voiture est tombée en panne"
                },
                "no_charge": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "tags": [
          "Booking"
        ],
        "summary": "Cancels the given booking",
        "operationId": "postBookingCancel",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The booking is canceled"
          },
          "400": {
            "description": "The data is incorrect"
          },
          "404": {
            "description": "The booking doesn't exist"
          }
        }
      }
    },
    "/tables": {
      "put": {
        "tags": [
          "Table"
        ],
        "summary": "Update tables position/rotation",
        "operationId": "putUpdateTables",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Table",
            "description": "The updated booking details",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "integer",
                    "example": 517
                  },
                  "position": {
                    "type": "object",
                    "properties": {
                      "x": {
                        "type": "integer",
                        "example": 452
                      },
                      "y": {
                        "type": "integer",
                        "example": 75
                      },
                      "rotation": {
                        "type": "integer",
                        "example": -90
                      }
                    }
                  },
                  "template": {
                    "type": "integer",
                    "example": 1
                  },
                  "new_number": {
                    "type": "integer",
                    "example": 33
                  },
                  "square": {
                    "type": "integer",
                    "example": 2
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Update ok"
          },
          "400": {
            "description": "Form Error",
            "schema": {
              "$ref": "#/definitions/FormError"
            }
          }
        }
      }
    },
    "/bus": {
      "get": {
        "tags": [
          "Bus"
        ],
        "summary": "Get a list of bus bookings",
        "operationId": "getBus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of bus bookings",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bus"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bus"
        ],
        "summary": "Creates a new bus booking",
        "parameters": [
          {
            "in": "body",
            "name": "Bus",
            "description": "The booking to create",
            "schema": {
              "$ref": "#/definitions/Bus"
            }
          }
        ],
        "operationId": "postBus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Bus booking created",
            "schema": {
              "$ref": "#/definitions/Bus"
            }
          }
        }
      }
    },
    "/bus/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "the bus booking ID"
        }
      ],
      "get": {
        "tags": [
          "Bus"
        ],
        "summary": "Restrieve a specific bus booking",
        "operationId": "getSpecificBus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The bus booking info",
            "schema": {
              "$ref": "#/definitions/Bus"
            }
          },
          "404": {
            "description": "Bus booking not found"
          }
        }
      },
      "put": {
        "tags": [
          "Bus"
        ],
        "summary": "Updates a given bus booking",
        "operationId": "putBus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "bus booking",
            "description": "The updated bus booking data",
            "schema": {
              "$ref": "#/definitions/Bus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bus booking updated",
            "schema": {
              "$ref": "#/definitions/Bus"
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/FormError"
            }
          },
          "404": {
            "description": "Booking not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Bus"
        ],
        "summary": "Cancels a given bus booking",
        "operationId": "deleteBus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "initials",
            "description": "Operator initials",
            "schema": {
              "type": "object",
              "properties": {
                "initials": {
                  "type": "string",
                  "example": "JD"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cancel successful"
          },
          "400": {
            "description": "Missing parameter"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Credentials": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "Acelys"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "Acelys"
        },
        "token": {
          "type": "string",
          "example": "t6EiTSIHS9i4lRdXIkmMNXdQk+xQL11jWAnOUYf3DnBMTo6ZTLi9ST6gcIoy3jiyNZQ="
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "ROLE_API"
          }
        }
      }
    },
    "FormError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Validation failed"
        }
      }
    },
    "InvalidCredentialsError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 401
        },
        "message": {
          "type": "string",
          "example": "Identifiants invalides."
        }
      }
    },
    "InvalidAuthTokenError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "example": 401
        },
        "message": {
          "type": "string",
          "example": "Invalid authentication token"
        }
      }
    },
    "ServingsSummary": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2019-02-12T00:00:00+01:00"
          },
          "moment": {
            "type": "object",
            "properties": {
              "noon": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 1
                  },
                  "first_part": {
                    "type": "integer",
                    "example": 53
                  },
                  "second_part": {
                    "type": "integer",
                    "example": 62
                  },
                  "total": {
                    "type": "integer",
                    "example": 115
                  },
                  "bus_pax": {
                    "type": "integer",
                    "example": 25
                  },
                  "bus_count": {
                    "type": "integer",
                    "example": 1
                  }
                }
              },
              "evening": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 2
                  },
                  "first_part": {
                    "type": "integer",
                    "example": 53
                  },
                  "second_part": {
                    "type": "integer",
                    "example": 62
                  },
                  "total": {
                    "type": "integer",
                    "example": 115
                  },
                  "bus_pax": {
                    "type": "integer",
                    "example": 25
                  },
                  "bus_count": {
                    "type": "integer",
                    "example": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "Serving": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "moment": {
          "type": "string",
          "example": "noon"
        },
        "hours": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "1970-01-01T11:30:00+01:00",
            "1970-01-01T11:45:00+01:00"
          ]
        }
      }
    },
    "EventsSummary": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Midi 1er janvier 2020"
          },
          "date": {
            "type": "string",
            "example": "2020-01-01T00:00:00+01:00"
          },
          "moment": {
            "type": "string",
            "example": "midi"
          },
          "first_part": {
            "type": "integer",
            "example": 87
          },
          "second_part": {
            "type": "integer",
            "example": 41
          },
          "total": {
            "type": "integer",
            "example": 128
          },
          "bus_pax": {
            "type": "integer",
            "example": 59
          },
          "bus_count": {
            "type": "integer",
            "example": 2
          }
        }
      }
    },
    "Bookings": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "been_there": {
            "type": "integer",
            "example": 5
          },
          "waiting_list_order": {
            "type": "string",
            "example": "a"
          },
          "is_late": {
            "type": "boolean",
            "example": false
          },
          "is_new_client": {
            "type": "boolean",
            "example": true
          },
          "is_seated": {
            "type": "boolean",
            "example": false
          },
          "is_second_serve": {
            "type": "boolean",
            "example": true
          },
          "gender": {
            "type": "string",
            "example": "Mme"
          },
          "lastname": {
            "type": "string",
            "example": "Doe"
          },
          "firstname": {
            "type": "string",
            "example": "Jane"
          },
          "is_table_free": {
            "type": "boolean",
            "example": true
          },
          "tables": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              401,
              402,
              403
            ]
          },
          "pax_count": {
            "type": "integer",
            "example": 8
          },
          "info": {
            "type": "string",
            "example": "Coucou"
          },
          "birthday": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              7,
              40
            ]
          },
          "children": {
            "type": "integer",
            "example": 2
          },
          "wheelchair": {
            "type": "integer",
            "example": 1
          },
          "stroller": {
            "type": "integer",
            "example": 0
          },
          "prefer_second_serve": {
            "type": "string",
            "example": "inside"
          },
          "waiter": {
            "type": "string",
            "example": "Michel"
          },
          "booking_time": {
            "type": "string",
            "example": "2019-02-14T12:00:00+01:00"
          },
          "phone_number": {
            "type": "string",
            "example": "0123456789"
          },
          "source": {
            "type": "string",
            "example": "mobile"
          },
          "initials": {
            "type": "string",
            "example": "AA"
          },
          "is_incomplete": {
            "type": "boolean",
            "example": false
          },
          "created_at": {
            "type": "string",
            "example": "2019-02-10T12:00:00+01:00"
          }
        }
      }
    },
    "BookingDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "lastname": {
          "type": "string",
          "example": "Doe"
        },
        "firstname": {
          "type": "string",
          "example": "Jane"
        },
        "phone_number": {
          "type": "string",
          "example": "0123456789"
        },
        "email": {
          "type": "string",
          "example": "jane.doe@example.org"
        },
        "zipcode": {
          "type": "string",
          "example": "34000"
        },
        "city": {
          "type": "string",
          "example": "Montpellier"
        },
        "is_vip": {
          "type": "boolean",
          "example": true
        },
        "comment": {
          "type": "string",
          "example": "A dragué la serveuse"
        },
        "initials": {
          "type": "string",
          "example": "AA"
        },
        "history": {
          "type": "string",
          "example": "jd[5|76+45],jd[4|87]"
        },
        "been_there": {
          "type": "integer",
          "example": 5
        },
        "previous_visit": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 2
            },
            "date": {
              "type": "string",
              "example": "2019-02-01T12:00:00+01:00"
            },
            "moment": {
              "type": "string",
              "example": "midi"
            },
            "waiter": {
              "type": "string",
              "example": "Michel"
            },
            "wine": {
              "type": "string",
              "example": "Beaujolais Nouveau"
            }
          }
        },
        "birthday": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            7,
            40
          ]
        },
        "children": {
          "type": "integer",
          "example": 2
        },
        "wheelchair": {
          "type": "integer",
          "example": 1
        },
        "stroller": {
          "type": "integer",
          "example": 0
        },
        "is_incomplete": {
          "type": "boolean",
          "example": false
        },
        "is_client": {
          "type": "boolean",
          "example": true
        },
        "info": {
          "type": "string",
          "example": "Coucou"
        },
        "pax_count": {
          "type": "integer",
          "example": 5
        },
        "tables": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            401,
            402,
            403
          ]
        },
        "room": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Salle Clape"
            }
          }
        },
        "booking_time": {
          "type": "string",
          "example": "2019-02-14T12:00:00+01:00"
        },
        "anticipated_release_hour": {
          "type": "string",
          "example": "1970-01-01T13:30:00+01:00"
        }
      }
    },
    "BookingQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "comment": {
          "type": "string",
          "example": "Coucou"
        },
        "option": {
          "type": "string",
          "example": "Pub"
        },
        "queue": {
          "type": "integer",
          "example": 1
        },
        "initials": {
          "type": "string",
          "example": "jd"
        }
      }
    },
    "Booking": {
      "type": "object",
      "properties": {
        "gender": {
          "type": "string",
          "example": "M."
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "lastname": {
          "type": "string",
          "example": "Doe"
        },
        "phone_number": {
          "type": "string",
          "example": "0102030405"
        },
        "note": {
          "type": "string",
          "example": "Ceci est une note"
        },
        "option": {
          "type": "string",
          "example": "Terrasse"
        },
        "pax_count": {
          "type": "integer",
          "example": 5
        },
        "booking_time": {
          "type": "string",
          "example": "2019-02-01T11:45:00+01:00"
        },
        "date": {
          "type": "string",
          "example": "2019-02-01T12:00:00+01:00"
        },
        "moment": {
          "type": "string",
          "example": "noon"
        },
        "is_vip": {
          "type": "boolean",
          "example": false
        },
        "is_new_client": {
          "type": "boolean",
          "example": true
        },
        "is_incomplete": {
          "type": "boolean",
          "example": false
        },
        "is_anticipated_release": {
          "type": "boolean",
          "example": false
        },
        "is_unmovable": {
          "type": "boolean",
          "example": true
        },
        "is_bus_or_group": {
          "type": "boolean",
          "example": false
        },
        "children": {
          "type": "integer",
          "example": 1
        },
        "wheelchair": {
          "type": "integer",
          "example": 0
        },
        "stroller": {
          "type": "integer",
          "example": 0
        },
        "birthday": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            14,
            75
          ]
        },
        "initials": {
          "type": "string",
          "example": "mf"
        },
        "status": {
          "type": "string",
          "example": "done"
        },
        "actual_arrival_time": {
          "type": "string",
          "example": "2019-01-05T15:25:00+01:00"
        },
        "queue": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "Table": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer",
          "example": 25
        },
        "square": {
          "type": "integer",
          "example": 1
        },
        "position": {
          "type": "object",
          "properties": {
            "x": {
              "type": "integer",
              "example": 452
            },
            "y": {
              "type": "integer",
              "example": 75
            },
            "rotation": {
              "type": "integer",
              "example": -90
            }
          }
        },
        "layout": {
          "type": "object",
          "properties": {
            "template": {
              "type": "integer",
              "example": 1
            },
            "capacity": {
              "type": "integer",
              "example": 2
            },
            "render": {
              "type": "string",
              "example": "{ \"blablabla\": \"coucou\" }"
            }
          }
        },
        "is_security": {
          "type": "boolean",
          "example": false
        },
        "is_anticipated_release": {
          "type": "boolean",
          "example": true
        },
        "bookings": {
          "type": "object",
          "properties": {
            "first_serve": {
              "$ref": "#/definitions/Booking"
            },
            "second_serve": {
              "$ref": "#/definitions/Booking"
            }
          }
        },
        "blockings": {
          "type": "object",
          "properties": {
            "first_serve": {
              "type": "boolean",
              "example": true
            },
            "second_serve": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "TableBlock": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-08-08T12:45:00+01:00"
        },
        "moment": {
          "type": "string",
          "example": "noon"
        },
        "serve_part": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "TablesBlock": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "example": "2019-08-08T12:45:00+01:00"
        },
        "moment": {
          "type": "string",
          "example": "noon"
        },
        "serve_part": {
          "type": "integer",
          "example": 1
        },
        "tables": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "example": [
            406,
            33
          ]
        }
      }
    },
    "Square": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "label": {
          "type": "string",
          "example": "Carré des 20"
        },
        "booked": {
          "type": "integer",
          "example": 15
        },
        "seated": {
          "type": "integer",
          "example": 6
        },
        "gone": {
          "type": "integer",
          "example": 4
        }
      }
    },
    "RoomTables": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Salle Clape"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table"
          }
        }
      }
    },
    "Room": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Salle Clape"
        }
      }
    },
    "Bus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 23
        },
        "date": {
          "type": "string",
          "example": "2019-01-01T00:00:00+01:00"
        },
        "moment": {
          "type": "string",
          "example": "noon"
        },
        "booking_time": {
          "type": "string",
          "example": "1970-01-01T12:45:00+01:00"
        },
        "group_name": {
          "type": "string",
          "example": "Acelys"
        },
        "phone_number": {
          "type": "string",
          "example": "0102030405"
        },
        "contact_name": {
          "type": "string",
          "example": "Alex ERGALANT"
        },
        "initials": {
          "type": "string",
          "example": "JD"
        },
        "pax_count": {
          "type": "integer",
          "example": 51
        },
        "pax_assigned": {
          "type": "integer",
          "example": 54
        },
        "tables": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": [
              32,
              33
            ]
          }
        },
        "rooms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Room"
          }
        }
      }
    }
  }
}
